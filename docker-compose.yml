services:
  postgres-dev:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_ROOT_USER}
      POSTGRES_PASSWORD: ${POSTGRES_ROOT_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_NAME}

      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_USER_CREATEDB: ${API_CAN_CREATEDB}
    volumes:
      - pgdata_dev:/var/lib/postgresql/data
    networks:
      - api_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_ROOT_USER} -d ${POSTGRES_DB_NAME}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: ["start-postgres.sh"]
    profiles:
      - dev

  postgres-test:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_ROOT_USER}
      POSTGRES_PASSWORD: ${POSTGRES_ROOT_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_NAME}

      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_USER_CREATEDB: ${API_CAN_CREATEDB}
    volumes:
      - pgdata_test:/var/lib/postgresql/data
    networks:
      - api_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_ROOT_USER} -d ${POSTGRES_DB_NAME}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: ["start-postgres.sh"]
    profiles:
      - test

  postgres-prod:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_ROOT_USER}
      POSTGRES_PASSWORD: ${POSTGRES_ROOT_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_NAME}

      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_USER_CREATEDB: false
    volumes:
      - pgdata_prod:/var/lib/postgresql/data
    networks:
      - api_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_ROOT_USER} -d ${POSTGRES_DB_NAME}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: ["start-postgres.sh"]
    profiles:
      - prod

  redis-dev:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redisdata_dev:/data
    networks:
      - api_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    profiles:
      - dev

  redis-test:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redisdata_test:/data
    networks:
      - api_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    profiles:
      - test

  redis-prod:
    image: redis:7-alpine
    restart: always
    volumes:
      - redisdata_prod:/data
    networks:
      - api_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    profiles:
      - prod

  api-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    restart: unless-stopped
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      HOST_PORT: ${HOST_PORT}

      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DATABASE_URL: ${DATABASE_URL}

      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN}

      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}

      STRIPE_API_KEY: ${STRIPE_API_KEY}
      STRIPE_WEBHOOK_KEY: ${STRIPE_WEBHOOK_KEY}

      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    ports:
      - "${HOST_PORT}:${PORT}"
    volumes:
      - .:/app:delegated
      - /app/node_modules
    networks:
      - api_network
    command: ["npm", "run", "start:dev"]
    profiles:
      - dev

  api-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    restart: always
    depends_on:
      postgres-prod:
        condition: service_healthy
      redis-prod:
        condition: service_healthy
    ports:
      - "${HOST_PORT}:${PORT}"
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      HOST_PORT: ${HOST_PORT}

      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DATABASE_URL: ${DATABASE_URL}

      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN}

      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}

      STRIPE_API_KEY: ${STRIPE_API_KEY}
      STRIPE_WEBHOOK_KEY: ${STRIPE_WEBHOOK_KEY}

      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    networks:
      - api_network
    command: ["npm", "run", "start:prod"]
    profiles:
      - prod

  api-e2e:
    build:
      context: .
      dockerfile: Dockerfile
      target: test
    restart: "no"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      HOST_PORT: ${HOST_PORT}

      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DATABASE_URL: ${DATABASE_URL}

      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN}

      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}

      STRIPE_API_KEY: ${STRIPE_API_KEY}
      STRIPE_WEBHOOK_KEY: ${STRIPE_WEBHOOK_KEY}

      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    networks:
      - api_network
    command: ["npm", "run", "test:e2e"]
    profiles:
      - test

volumes:
  pgdata_dev:
  pgdata_test:
  pgdata_prod:
  redisdata_dev:
  redisdata_test:
  redisdata_prod:

networks:
  api_network:
    driver: bridge
