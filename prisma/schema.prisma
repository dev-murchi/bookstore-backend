// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  users User[]
}

model User {
  id                  String               @id @default(uuid())
  name                String
  email               String               @unique
  password            String
  role                Role                 @relation(fields: [roleId], references: [id])
  roleId              Int
  cart                Cart?
  isActive            Boolean              @default(true)
  lastPasswordResetAt DateTime
  passwordResetTokens PasswordResetToken[]

  books   Book[]
  orders  Order[]
  reviews Review[]

  userSessions UserSession[]
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  expiresAt DateTime @db.Timestamptz(6)
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  books Book[]
}

model Book {
  id            String   @id @default(uuid())
  title         String
  author        User     @relation(fields: [authorId], references: [id])
  authorId      String
  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    Int
  isbn          String   @unique
  price         Decimal  @db.Decimal(10, 2)
  description   String?
  stockQuantity Int      @default(0)
  rating        Float    @default(0)
  imageUrl      String?
  isActive      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  cartItems  CartItem[]
  orderItems OrderItem[]
  reviews    Review[]
}

model Cart {
  id             String     @id @default(uuid())
  userId         String?    @unique
  guestCartToken String?    @unique
  cartItems      CartItem[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  user User? @relation(fields: [userId], references: [id])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    String
  bookId    String
  quantity  Int
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  book      Book     @relation(fields: [bookId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, bookId])
}

model Order {
  id              String    @id @default(uuid())
  userId          String?
  guestName       String?
  guestEmail      String?
  totalPrice      Decimal   @default(0) @db.Decimal(10, 2)
  shippingDetails Shipping?
  status          String    @default("pending")
  user            User?     @relation(fields: [userId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt

  orderItems OrderItem[]
  payment    OrderPayment?
  refunds    Refund[]
}

model OrderItem {
  id       Int     @id @default(autoincrement())
  orderId  String
  bookId   String
  quantity Int
  price    Decimal @default(0) @db.Decimal(10, 2)

  order     Order    @relation(fields: [orderId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orderId, bookId])
}

model Address {
  id         Int     @id @default(autoincrement())
  country    String
  state      String?
  city       String
  line1      String
  line2      String?
  postalCode String

  shippingAddresses Shipping[]
}

model Shipping {
  id        Int     @id @default(autoincrement())
  email     String
  phone     String?
  name      String
  orderId   String  @unique
  addressId Int

  order   Order   @relation(fields: [orderId], references: [id])
  address Address @relation(fields: [addressId], references: [id])
}

model OrderPayment {
  id            String   @id @default(uuid())
  orderId       String   @unique
  transactionId String   @unique
  status        String
  method        String
  amount        Decimal  @db.Decimal(10, 2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id])
}

model Review {
  id     String @id @default(uuid())
  rating Float
  data   String
  bookId String
  userId String

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  @@unique([bookId, userId])
}

model Refund {
  id            Int      @id @default(autoincrement())
  refundId      String   @unique
  orderId       String
  transactionId String
  status        String
  amount        Decimal  @db.Decimal(10, 2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  failureReason String?

  order Order @relation(fields: [orderId], references: [id])
}

model UserSession {
  id              String   @id @default(uuid())
  userId          String
  refreshToken    String?
  refreshRequired Boolean  @default(false)
  createdAt       DateTime @default(now())
  expiresAt       DateTime

  user User @relation(fields: [userId], references: [id])
}
