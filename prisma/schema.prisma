// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Roles {
  id        Int     @default(autoincrement()) @id
  role_name String  @unique

  User User[]
}

model User {
  id        Int     @default(autoincrement()) @id
  userid    String @unique
  name      String
  email     String @unique
  password  String
  role      Roles @relation(fields: [roleid], references: [id])
  roleid    Int
  cart      cart?
  is_active Boolean

  password_reset_tokens password_reset_tokens[]

  books books[]
  order orders[]
  reviews reviews[]
}

model password_reset_tokens {
  token_id    Int     @default(autoincrement()) @id
  user        User @relation(fields: [userid], references: [userid])
  userid      String
  token       String  @unique
  expires_at  DateTime  @db.Timestamptz(6)
}

model category {
  id            Int     @default(autoincrement()) @id
  category_name String  @unique

  books books[]
}

model books {
  id            Int      @id @default(autoincrement())
  bookid        String   @unique
  title         String 
  author        User  @relation(fields: [authorid], references: [userid])
  authorid      String
  category      category  @relation(fields: [categoryid], references: [id])
  categoryid    Int
  isbn          String   @unique
  price         Decimal  @db.Decimal(10, 2)
  description   String? 
  stock_quantity Int     @default(0)
  rating        Int      @default(0)
  image_url     String? 
  is_active     Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt

  cart_items cart_items[]
  order_items order_items[]
  reviews reviews[]

  @@unique([bookid, authorid])
}

model cart {
  id          Int          @id @default(autoincrement())
  userid      String? @unique
  cart_items  cart_items[]
  created_at  DateTime @default(now())

  user      User? @relation(fields: [userid], references: [userid])
}

model cart_items {
  id       Int    @id @default(autoincrement())
  cartid   Int
  bookid   String
  quantity Int
  cart     cart   @relation(fields: [cartid], references: [id], onDelete: Cascade) 
  book     books  @relation(fields: [bookid], references: [bookid])
  
  @@unique([cartid, bookid])
}

model orders {
  id  Int @id @default(autoincrement())
  userid String?
  totalPrice  Float @default(0)
  shipping_details  shipping?
  status  String  @default("pending")
  user  User? @relation(fields: [userid], references: [userid])

  order_items order_items[]
  payment payment?
}

model order_items {
  id  Int @id @default(autoincrement())
  orderid Int
  bookid String
  quantity  Int
  price Float @default(0)

  order orders @relation(fields: [orderid], references: [id])
  book  books @relation(fields: [bookid], references: [bookid])
}

model address {
  id              Int       @id @default(autoincrement()) 
  country         String  
  state           String? 
  city            String
  line1           String
  line2           String?
  postalCode      String

  shipping_address shipping[]
}

model shipping {
  id Int  @id @default(autoincrement())
  email           String  
  phone           String? 
  orderid Int @unique
  addressid Int

  order orders @relation(fields: [orderid], references: [id])
  address address @relation(fields: [addressid], references: [id])
}

model payment {
  id Int  @id @default(autoincrement())
  orderid Int @unique
  transaction_id String?
  status String
  method  String
  amount Float
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  order  orders @relation(fields: [orderid], references: [id])
}

model reviews {
  id  Int @id @default(autoincrement())
  rating Float
  data String
  bookid  String
  userid String

  user  User @relation(fields: [userid], references: [userid])
  book books @relation(fields: [bookid], references: [bookid])
  @@unique([bookid, userid])
}